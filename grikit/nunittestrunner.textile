The NUnitTestRunner is meant to be used with the NCoverConsoleTask. For more information on test runners, see the [[ncoverconsoletask|NCoverConsoleTask]].

h3. How to use the NUnitTestRunner

There are only a few pieces of information needed for the NUnitTestRunner to operate correctly. Most notably are the path to the nunit-console executable, and a list of assemblies for nunit to run tests again.

For example

<pre><code>nunit = NUnitTestRunner.new("Tools/NUnit-v2.5/nunit-console.exe")
nunit.assemblies << "CodeCoverage/assemblies/TestSolution.Tests.dll"
nunit.options << '/noshadow'
</code></pre>

h2. Configuration options

h3. initializer/path_to_command (required)

You must provide the location of the nunit console executable either through the constructor or via the .path_to_command setting.

h3. assemblies (required)

You must provide at least one assembly for nunit to run. This should be the assembly that contains your [TestFixture]s and [Test]s. 

You can wholesale replace the assemblies list with an array of dlls, or you can append individual dlls to the list. The following examples produce the same results.

Specify an array of assemblies
<pre><code>nunit.assemblies = ['some.test.dll', 'another.test.dll', 'stillmore.tests.dll']</code></pre>

Append assemblies one at a time
<pre><code>nunit.assemblies << 'some.test.dll'
nunit.assemblies << 'another.test.dll'
nunit.assemblies << 'stillmore.tests.dll'
</code></pre>

h3. options (optional)

You can specify additional parameters for the nunit executable here. If the options require a "/", "-", or any other special character, be sure to include that in the option.

Like the assemblies setting, options is an array that can be wholesale replaced or appended to.

<pre><code>nunit.options = ['/someoption', '/anotheroption']</pre></code>

or

<pre><code>nunit.options << '/someoption'
nunit.options << '/anotheroption'
</code></pre>

